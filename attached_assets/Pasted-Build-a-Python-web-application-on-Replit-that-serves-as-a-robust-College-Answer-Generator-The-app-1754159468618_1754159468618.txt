Build a Python web application on Replit that serves as a robust "College Answer Generator." The application should present a clean, intuitive homepage.

First, users will find sections to **upload a PDF Question Bank** (computer-typed, with selectable text, not handwritten), and optionally upload **multiple College Notes PDFs**. A prominent interface will allow the user to select the **Subject** of the question bank (e.g., Mathematics, Physics, Computer Science, History, Literature), which will dynamically influence the AI's answer generation.

Crucially, beneath the subject selection, provide an option (e.g., radio buttons or a toggle) to select the **Answer Generation Mode**:
* **"Understand Mode":** When selected, answers should be generated in more depth, with explanations, analogies, and detailed comments to aid comprehension, using simpler language where appropriate for foundational understanding.
* **"Exam Mode":** When selected, answers should be concise, highly focused on direct answers and key points relevant for an exam, minimizing verbose examples or extensive background explanations, and using formal academic language.

Additionally, an optional text area will appear when a checkbox is toggled, allowing users to input **Custom Prompt Instructions** for the answer generation, which will also be dynamically sent to the AI model alongside the selected mode and subject.

Upon clicking a "Generate Answers" button, the application will first extract all questions from the Question Bank PDF. If College Notes PDFs are provided, their text will also be extracted, chunked, and processed to create an an internal, searchable reference that the AI can use to enrich its answers. For each question, a sophisticated prompt will be dynamically constructed for a powerful AI model (like Google Gemini). This prompt will combine general instructions for an 8-mark college-level answer, specific instructions based on the selected subject, relevant retrieved content from the College Notes, any user-provided custom instructions, and the crucial guidance based on the chosen "Understand Mode" or "Exam Mode." The AI model will be instructed to generate answers in Markdown format, with mathematical content specifically using LaTeX syntax (inline with `$` and display with `$$`).

Throughout this entire process, display clear, real-time progress updates on the webpage, indicating stages like PDF processing, question-by-question answer generation, and final compilation. Once all answers are generated, they will be compiled into a single, professional-looking PDF document. This output PDF must include a clear cover page, a table of contents, and ensure each answer is well-structured with proper headings, bolded key terms, italicized emphasis, bullet points, numbered lists, and correctly rendered code blocks. Crucially, all LaTeX mathematical expressions generated by the AI must be visually rendered as proper equations within the PDF, not just raw code. If feasible with the PDF generation method, allow for subtle, professional color highlighting (e.g., a light blue or yellow) of specific semantic elements (like definitions or key takeaways) within the answers to enhance readability and a premium feel.

Finally, the application should maintain a **record of previously generated answer sets**, accessible from a dedicated section (e.g., a "History" or "My Answers" tab), allowing users to easily view and re-download their past generated PDFs. A prominent button will then be available for the user to download the currently compiled, professionally formatted PDF of answers.